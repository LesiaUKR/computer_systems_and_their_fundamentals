import asyncio  # Імпортуємо бібліотеку asyncio для роботи з асинхронним програмуванням

# Оголошуємо асинхронну функцію baz, яка повертає рядок


async def baz() -> str:
    # Виводимо повідомлення перед виконанням асинхронної затримки
    print("Before Sleep")
    # Використовуємо await для затримки на 1 секунду (асинхронна пауза)
    # await asyncio.sleep(0)  - лайфхак, який дає впевненість, що функція точно асинхронна
    await asyncio.sleep(1)  # Виводимо повідомлення після завершення затримки
    print("After Sleep")
    return "Hello world"  # Повертаємо рядок "Hello world"

# Оголошуємо основну асинхронну функцію


async def main():
    r = baz()  # Викликаємо функцію baz, але не чекаємо її завершення, r отримує об'єкт coroutine
    print(r)  # Виводимо об'єкт coroutine (не результат виконання функції)
    result = await r  # Чекаємо завершення виконання функції baz і отримуємо її результат
    print(result)  # Виводимо результат виконання функції baz ("Hello world")

# Виконуємо код лише якщо файл виконується як головний модуль
if __name__ == "__main__":
    # Запускаємо основну асинхронну функцію main за допомогою asyncio.run
    asyncio.run(main())
