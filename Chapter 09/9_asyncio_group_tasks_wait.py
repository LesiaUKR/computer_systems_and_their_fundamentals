import asyncio  # Імпортуємо asyncio для роботи з асинхронним програмуванням

# Асинхронна функція task_one


async def task_one():
    """
    Симулює виконання першого завдання із затримкою в 1 секунду.

    Повертає:
        str: Результат виконання завдання.
    """
    await asyncio.sleep(1)  # Імітуємо паузу 1 секунду
    return "результат task_one"  # Повертаємо результат завдання

# Асинхронна функція task_two


async def task_two():
    """
    Симулює виконання другого завдання із затримкою в 2 секунди.

    Повертає:
        str: Результат виконання завдання.
    """
    await asyncio.sleep(2)  # Імітуємо паузу 2 секунди
    return "результат task_two"  # Повертаємо результат завдання

# Основна асинхронна функція
# asyncio.FIRST_COMPLETED: Очікування завершується, як тільки перше завдання виконається.


async def main():
    """
    Створює та запускає кілька асинхронних завдань одночасно.
    Очікує завершення першого завдання і виводить його результат.
    """
    # Створюємо список завдань за допомогою asyncio.create_task
    tasks = [asyncio.create_task(task) for task in [task_one(), task_two()]]

    # Використовуємо asyncio.wait для очікування завдань
    # Параметр return_when=asyncio.FIRST_COMPLETED дозволяє завершити очікування,
    # як тільки перше завдання виконається
    done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)

    # Обробляємо завершені завдання
    for task in done:
        # Виводимо результат першого завершеного завдання
        print("Завершено:", task.result())

# Основний блок виконання
if __name__ == "__main__":
    """
    Запускає основну асинхронну функцію main за допомогою asyncio.run.
    """
    asyncio.run(main())  # Запускаємо основну функцію
